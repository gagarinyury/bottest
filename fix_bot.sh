#!/bin/bash

echo "üöÄ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º  –∏ , –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞..."

# 1Ô∏è‚É£ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω)
cat <<LSPY > ~/professor_y_bot/handlers/lessons.py
import sqlite3
import logging
from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import config

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_lesson(user_id):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT current_lesson FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()

    if row:
        lesson_id = row[0]
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ –¥–∞—ë–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
        cursor.execute("INSERT INTO users (id, current_lesson) VALUES (?, 1)", (user_id,))
        conn.commit()
        lesson_id = 1

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞
    cursor.execute("SELECT title, content, image FROM lessons WHERE id = ?", (lesson_id,))
    lesson = cursor.fetchone()
    
    conn.close()
    
    if lesson:
        return lesson_id, lesson[0], lesson[1], lesson[2]
    else:
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lesson
@router.message(commands=["lesson"])
async def send_lesson(message: types.Message):
    user_id = message.from_user.id
    lesson = get_lesson(user_id)

    if lesson:
        lesson_id, title, content, image = lesson

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", "–î–∞–ª–µ–µ", "–ú–µ–Ω—é"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ")],
                [KeyboardButton(text="üìú –ú–µ–Ω—é")]
            ],
            resize_keyboard=True
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
        response = f"üìñ *{title}*\n\n{content}"
        
        if image:
            await message.answer_photo(photo=image, caption=response, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

LSPY

echo "‚úÖ  –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!"

# 2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤ –≤ 
cat <<BTPY > ~/professor_y_bot/bot.py
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import config
from handlers.lessons import router as lessons_router

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.include_router(lessons_router)

async def on_startup():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    await bot.set_webhook(url=config.WEBHOOK_URL)
    await bot.set_my_commands([BotCommand(command="lesson", description="–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫")])
    logging.info(f"üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {config.WEBHOOK_URL}")

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=config.WEBHOOK_PATH)
setup_application(app, dp, bot=bot, on_startup=on_startup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=config.WEBHOOK_PORT)

BTPY

echo "‚úÖ  –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å —É—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã."

# 3Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
echo "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞..."
cd ~/professor_y_bot
./restart_bot.sh

echo "‚úÖ –ë–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!"
